# Apache License 2.0

name: Build and Test

on:
  push:
    branches:
      - /^\d+\.\d+(\.\d+)?(-\S*)?$/
      - main
      - dev
    tags:
      - '*.*.*'
  pull_request:
    branches:
      - main

concurrency:
  group: ci-tests-${{ github.ref }}-1
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  LANG: en_US.UTF-8

jobs:
  prepare-environment:
    name: Prepare Environment Variables
    runs-on: ubuntu-latest
    outputs:
      project_version: ${{ steps.project-version.outputs.value }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true
      - id: project-version
        name: Get Project Version
        run: |
          project_version=$(git describe --tags --always)
          echo "Project version: ${project_version}"
          echo "::set-output name=value::${project_version}"

  build-image-development:
    name: Build Development Image
    runs-on: ubuntu-latest
    needs:
      - prepare-environment
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Development Image
        uses: docker/build-push-action@v3
        with:
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-development:${{ needs.prepare-environment.outputs.project_version }}
          context: ./docker/development
          build-args: |
            VERSION=${{ needs.prepare-environment.outputs.project_version }}
          push: true

  test-unit-cpp:
    name: Run C++ Unit Tests
    runs-on: ubuntu-latest
    needs:
      - prepare-environment
      - build-image-development
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull Development Image
        run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-development:${{ needs.prepare-environment.outputs.project_version }}
      - name: Run Unit Tests C++
        run: make test-coverage-cpp
      - name: Upload Coverage Results
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage/
          fail_ci_if_error: false

  test-unit-python:
    name: Run Python Unit Tests
    runs-on: ubuntu-latest
    needs:
      - prepare-environment
      - build-image-development
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull Development Image
        run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-development:${{ needs.prepare-environment.outputs.project_version }}
      - name: Run Unit Tests Python
        run: make test-unit-python

  build-package-cpp:
    name: Build C++ Package
    runs-on: ubuntu-latest
    needs:
      - prepare-environment
      - test-unit-cpp
      - test-unit-python
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull Development Image
        run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-development:${{ needs.prepare-environment.outputs.project_version }}
      - name: Build C++ Package
        run: make build-packages-cpp
      - name: Upload C++ Package
        uses: actions/upload-artifact@v3
        with:
          name: cpp-package
          path: packages/cpp/

  build-package-python:
    name: Build Python Package
    runs-on: ubuntu-latest
    needs:
      - prepare-environment
      - test-unit-cpp
      - test-unit-python
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull Development Image
        run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-development:${{ needs.prepare-environment.outputs.project_version }}
      - name: Build Python Package
        run: make build-packages-python
      - name: Upload Python Package
        uses: actions/upload-artifact@v3
        with:
          name: python-package
          path: packages/python/

  build-documentation:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs:
      - prepare-environment
      - test-unit-cpp
      - test-unit-python
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Documentation
        run: make build-documentation
      - name: Upload Documentation
        uses: actions/upload-artifact@v3
        with:
          name: docs
          path: docs/
